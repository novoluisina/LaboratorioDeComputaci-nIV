// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using todo_item.DBContext;

#nullable disable

namespace todo_item.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.18");

            modelBuilder.Entity("todo_item.Entities.Todo_item", b =>
                {
                    b.Property<int>("Id_item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id_item");

                    b.HasIndex("UserId");

                    b.ToTable("Todo_items");

                    b.HasData(
                        new
                        {
                            Id_item = 1,
                            Description = "La tarea consta de realizar el backend para una todo list. Se debe entregar el 17/4",
                            Title = "Completar tarea Laboratorio",
                            UserId = 0
                        });
                });

            modelBuilder.Entity("todo_item.Entities.User", b =>
                {
                    b.Property<int>("Id_user")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id_user");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType");

                    b.HasData(
                        new
                        {
                            Id_user = 1,
                            Address = "Rivadavia 111",
                            Email = "ngomez@gmail.com",
                            Name = "Nicolas",
                            State = true
                        },
                        new
                        {
                            Id_user = 2,
                            Address = "Colon 212",
                            Email = "juanperez@gmail.com",
                            Name = "Juan",
                            State = true
                        });
                });

            modelBuilder.Entity("todo_item.Entities.Todo_item", b =>
                {
                    b.HasOne("todo_item.Entities.User", "User")
                        .WithMany("Todo_items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("todo_item.Entities.User", b =>
                {
                    b.Navigation("Todo_items");
                });
#pragma warning restore 612, 618
        }
    }
}
